# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and tests
    runs-on: ubuntu-latest
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm install
    - run: npm test -- --coverage --coverageReporters="json-summary" 
    - name: Check code coverage
      run: |
        sudo apt-get install -y jq
        COVERAGE_THRESHOLD=60
        ACTUAL_COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        if [ -z "$ACTUAL_COVERAGE" ]; then
          echo "Error: ACTUAL_COVERAGE is not set"
          exit 1
        fi
        
        if [ -z "$COVERAGE_THRESHOLD" ]; then
          echo "Error: COVERAGE_THRESHOLD is not set"
          exit 1
        fi
        
        if (( $(bc <<< "$ACTUAL_COVERAGE < $COVERAGE_THRESHOLD") )); then
          echo "Code coverage is below the required threshold ($ACTUAL_COVERAGE% < $COVERAGE_THRESHOLD%)"
          exit 1
        else
          echo "Code coverage is acceptable ($ACTUAL_COVERAGE% >= $COVERAGE_THRESHOLD%)"
        fi

  tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps: 
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.8.1
      
  deploy:
    name: Deploy
    needs: [build] # Our tests must pass in order to run the deploy job
    runs-on: ubuntu-latest
    environment: production
    steps: 
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }} # Can be found as part of the Deploy Hook
          api-key: ${{ secrets.RENDER_API_KEY }} # Create your API key in Render Dashboard > Account Settings
